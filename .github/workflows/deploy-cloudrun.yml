name: Deploy to Google Cloud Run (Free Tier Optimized)

# 必要なGitHub Secrets:
# - GCP_PROJECT_ID: Google Cloud プロジェクトID
# - GCP_SA_KEY: サービスアカウントJSONキー (base64エンコード推奨)
# - YT_API_KEY: YouTube Data API v3 キー
#
# 💡 セキュリティ向上のため、将来的にWorkload Identity Federationへの移行を推奨:
# - GCP_WIF_PROVIDER: Workload Identity Provider
# - GCP_DEPLOYER_SA: デプロイ用サービスアカウント
#
# 📊 無料枠使用量監視:
# - https://console.cloud.google.com/billing/consumption
# - https://console.cloud.google.com/run/detail/us-central1/yt-livechat/metrics

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1  # Always Free リージョン
  SERVICE: yt-livechat
  REPOSITORY: yt-livechat
  APP_PATH: ./cmd/server

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Go build & test
        run: |
          go mod download
          go build ./...
          go test ./... -run . -count=1

      # 🔐 セキュリティ推奨: Workload Identity Federation への移行を検討
      # workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
      # service_account: ${{ secrets.GCP_DEPLOYER_SA }}
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build and push Docker image (buildx cache)
        env:
          IMAGE_NAME: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
        run: |
          echo "Building image with buildx: $IMAGE_NAME"
          docker buildx build \
            --platform linux/amd64 \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            --build-arg APP_PATH=${{ env.APP_PATH }} \
            -t "$IMAGE_NAME" \
            --push .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Deploy to Cloud Run (Free Tier Optimized)
        run: |
          echo "Deploying image: $IMAGE_NAME"
          # 🆓 無料枠最適化設定（<1 vCPU制約対応）
          gcloud run deploy ${{ env.SERVICE }} \
            --image "$IMAGE_NAME" \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances 0 \
            --max-instances 3 \
            --cpu 0.167 \
            --memory 256Mi \
            --concurrency 1 \
            --timeout 3600 \
            --execution-environment gen2 \
            --set-env-vars YT_API_KEY=${{ secrets.YT_API_KEY }},MAX_CHAT_MESSAGES=500,MAX_USERS=100,LOG_LEVEL=WARN \
            --port 8080

      - name: Health Check & Summary
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE }} --region ${{ env.REGION }} --format 'value(status.url)')
          
          # ヘルスチェック実行（リトライ付き）
          echo "Performing health check..."
          HEALTH_STATUS="❌ Unhealthy"
          for i in {1..10}; do
            echo "Health check attempt $i/10..."
            if curl -fsSL --max-time 10 "$URL/health"; then
              echo "✅ Health check passed"
              HEALTH_STATUS="✅ Healthy"
              break
            fi
            echo "Waiting 5 seconds before retry..."
            sleep 5
          done
          
          # デプロイサマリー作成
          echo "### 🚀 Cloud Run デプロイ完了！" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 項目 | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 🏠 **ホーム** | [$URL]($URL) |" >> $GITHUB_STEP_SUMMARY
          echo "| 👥 **ユーザーリスト** | [$URL/users]($URL/users) |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 **ログ画面** | [$URL/logs]($URL/logs) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏥 **ヘルスチェック** | [$URL/health]($URL/health) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 **監視状態API** | [$URL/api/monitoring/active]($URL/api/monitoring/active) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ステータス**: $HEALTH_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💰 無料枠最適化設定" >> $GITHUB_STEP_SUMMARY
          echo "| 設定項目 | 値 | 理由 |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---|------|" >> $GITHUB_STEP_SUMMARY
          echo "| **CPU** | 0.167 vCPU | 無料枠内(<1 vCPU制約対応) |" >> $GITHUB_STEP_SUMMARY
          echo "| **メモリ** | 256Mi | 最小構成 |" >> $GITHUB_STEP_SUMMARY
          echo "| **並行実行** | 1 | SSE接続+<1vCPU制約 |" >> $GITHUB_STEP_SUMMARY
          echo "| **最大インスタンス** | 3 | コスト制御 |" >> $GITHUB_STEP_SUMMARY
          echo "| **実行環境** | gen1 | 分数CPU対応 |" >> $GITHUB_STEP_SUMMARY
          echo "| **チャット制限** | 500メッセージ | メモリ節約 |" >> $GITHUB_STEP_SUMMARY
          echo "| **ユーザー制限** | 100ユーザー | メモリ節約 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **注意**: 24時間常時接続は無料枠超過の可能性があります" >> $GITHUB_STEP_SUMMARY
